#!/usr/bin/python

#### measure

def measure(response_seconds=1, header=None, content=None, method='GET', url=None):

    import gevent
    from requests import request

    headers = dict()
    for name_value in (header or ()):
        try:
            name, value = name_value.split(':', 1)
        except ValueError:
            exit("Invalid header: '{header}'".format(header=name_value))
        headers[name] = value

    def worker():
        response = request(headers=headers, data=content, method=method, url=url)
        # response.ok
        return response.text

    workers = []
    workers.append(gevent.spawn(worker))
    gevent.joinall(workers)
    print([worker.get() for worker in workers])

    return len(workers)

#### main

def main():

    #### parse command line arguments

    from argparse import ArgumentParser, RawTextHelpFormatter
    args_parser = ArgumentParser(
        description='Web load test measuring how many concurrent users will get response to their actions quickly - within a second.',
        epilog='''
Criterion:
    Maximal number of concurrent requests to the slowest URL
    while each request gets successful response within a second.

webqresp version 0.1.0
Copyright (C) 2013 by Denis Ryzhkov <denisr@denisr.com>
MIT License, see http://opensource.org/licenses/MIT
''',
        formatter_class=RawTextHelpFormatter,
    )
    args_parser.add_argument('--response-seconds', type=float, default=1, help='Maximal response time in seconds for each request to pass the test. Default: 1 second.')
    args_parser.add_argument('--header', action='append', help="Additional headers, e.g. --header='Content-Type: application/json' --header='X-Name: Value'.")
    args_parser.add_argument('--content', help='''Content for POST, etc. E.g. 'name1=value1&name2=value2' or '{"name1": "value1", "name2": "value2"}'.''')
    args_parser.add_argument('--method', default='GET', help='HTTP Method. Default: GET.')
    args_parser.add_argument('url', help='URL to test, e.g. http://example.com/some/page')
    args = args_parser.parse_args()

    #### become cooperative

    import gevent.monkey
    gevent.monkey.patch_all()

    #### measure

    print(measure(**vars(args)))

if __name__ == '__main__':
    main()
